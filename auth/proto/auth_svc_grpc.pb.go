// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/auth_svc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthserviceClient is the client API for Authservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthserviceClient interface {
	GetToken(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Token, error)
	ValidateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*User, error)
}

type authserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthserviceClient(cc grpc.ClientConnInterface) AuthserviceClient {
	return &authserviceClient{cc}
}

func (c *authserviceClient) GetToken(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/Authservice/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authserviceClient) ValidateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Authservice/ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthserviceServer is the server API for Authservice service.
// All implementations must embed UnimplementedAuthserviceServer
// for forward compatibility
type AuthserviceServer interface {
	GetToken(context.Context, *Credentials) (*Token, error)
	ValidateToken(context.Context, *Token) (*User, error)
	mustEmbedUnimplementedAuthserviceServer()
}

// UnimplementedAuthserviceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthserviceServer struct {
}

func (UnimplementedAuthserviceServer) GetToken(context.Context, *Credentials) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedAuthserviceServer) ValidateToken(context.Context, *Token) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedAuthserviceServer) mustEmbedUnimplementedAuthserviceServer() {}

// UnsafeAuthserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthserviceServer will
// result in compilation errors.
type UnsafeAuthserviceServer interface {
	mustEmbedUnimplementedAuthserviceServer()
}

func RegisterAuthserviceServer(s grpc.ServiceRegistrar, srv AuthserviceServer) {
	s.RegisterService(&Authservice_ServiceDesc, srv)
}

func _Authservice_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthserviceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authservice/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthserviceServer).GetToken(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authservice_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthserviceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Authservice/ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthserviceServer).ValidateToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// Authservice_ServiceDesc is the grpc.ServiceDesc for Authservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Authservice",
	HandlerType: (*AuthserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _Authservice_GetToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _Authservice_ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth_svc.proto",
}
