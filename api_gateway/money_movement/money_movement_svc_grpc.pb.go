// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/money_movement_svc.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MoneyMovementServiceClient is the client API for MoneyMovementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoneyMovementServiceClient interface {
	Authorize(ctx context.Context, in *AuthorizePayload, opts ...grpc.CallOption) (*AuthorizeResponse, error)
	Capture(ctx context.Context, in *CapturePayload, opts ...grpc.CallOption) (*empty.Empty, error)
}

type moneyMovementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoneyMovementServiceClient(cc grpc.ClientConnInterface) MoneyMovementServiceClient {
	return &moneyMovementServiceClient{cc}
}

func (c *moneyMovementServiceClient) Authorize(ctx context.Context, in *AuthorizePayload, opts ...grpc.CallOption) (*AuthorizeResponse, error) {
	out := new(AuthorizeResponse)
	err := c.cc.Invoke(ctx, "/MoneyMovementService/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyMovementServiceClient) Capture(ctx context.Context, in *CapturePayload, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/MoneyMovementService/Capture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoneyMovementServiceServer is the server API for MoneyMovementService service.
// All implementations must embed UnimplementedMoneyMovementServiceServer
// for forward compatibility
type MoneyMovementServiceServer interface {
	Authorize(context.Context, *AuthorizePayload) (*AuthorizeResponse, error)
	Capture(context.Context, *CapturePayload) (*empty.Empty, error)
	mustEmbedUnimplementedMoneyMovementServiceServer()
}

// UnimplementedMoneyMovementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMoneyMovementServiceServer struct {
}

func (UnimplementedMoneyMovementServiceServer) Authorize(context.Context, *AuthorizePayload) (*AuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedMoneyMovementServiceServer) Capture(context.Context, *CapturePayload) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Capture not implemented")
}
func (UnimplementedMoneyMovementServiceServer) mustEmbedUnimplementedMoneyMovementServiceServer() {}

// UnsafeMoneyMovementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoneyMovementServiceServer will
// result in compilation errors.
type UnsafeMoneyMovementServiceServer interface {
	mustEmbedUnimplementedMoneyMovementServiceServer()
}

func RegisterMoneyMovementServiceServer(s grpc.ServiceRegistrar, srv MoneyMovementServiceServer) {
	s.RegisterService(&MoneyMovementService_ServiceDesc, srv)
}

func _MoneyMovementService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyMovementServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MoneyMovementService/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyMovementServiceServer).Authorize(ctx, req.(*AuthorizePayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoneyMovementService_Capture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapturePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyMovementServiceServer).Capture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MoneyMovementService/Capture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyMovementServiceServer).Capture(ctx, req.(*CapturePayload))
	}
	return interceptor(ctx, in, info, handler)
}

// MoneyMovementService_ServiceDesc is the grpc.ServiceDesc for MoneyMovementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoneyMovementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MoneyMovementService",
	HandlerType: (*MoneyMovementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _MoneyMovementService_Authorize_Handler,
		},
		{
			MethodName: "Capture",
			Handler:    _MoneyMovementService_Capture_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/money_movement_svc.proto",
}
